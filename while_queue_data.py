# while_queue_data.py
# Generated by Gemini
#
import multiprocessing
import duckdb

def data_producer(queue):
    """Fetches data from DuckDB and puts it into the queue."""

    # Connect to DuckDB
    conn = duckdb.connect()

    # Sample query (replace with your actual query)
    query = """
        SELECT *
        FROM your_table;
    """

    # Execute the query and fetch results
    results = conn.execute(query).fetchall()

    # Put data into the queue
    for row in results:
        queue.put(row)

    # Close the connection
    conn.close()

def data_consumer(queue):
    """Retrieves data from the queue and processes it."""

    # Process data here (replace with your processing logic)
    while True:
        data = queue.get()
        if data is None:
            break
        print(f"Processing data: {data}")  # Sample processing

if __name__ == "__main__":
    # Create a queue
    queue = multiprocessing.Queue()

    # Create producer and consumer processes
    producer = multiprocessing.Process(target=data_producer, args=(queue,))
    consumer = multiprocessing.Process(target=data_consumer, args=(queue,))

    # Start the processes
    producer.start()
    consumer.start()

    # Wait for the producer to finish
    producer.join()

    # Put a sentinel value to signal the consumer to stop
    queue.put(None)

    # Wait for the consumer to finish
    consumer.join()

    print("Data processing complete.")